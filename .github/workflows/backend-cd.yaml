name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
    # paths:
    #   - 'starter/backend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.14'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
        working-directory: ./starter/backend

      - name: Run lint
        run: pipenv run lint
        working-directory: ./starter/backend

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.14'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
        working-directory: ./starter/backend

      - name: Run tests
        run: pipenv run test
        working-directory: ./starter/backend

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.14'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --deploy --ignore-pipfile
        working-directory: ./starter/backend

      - name: Build Docker image
        working-directory: ./starter/backend
        run: |
          docker build --tag backend:${{ github.sha }} .
          docker images # List images to confirm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag Docker image for ECR
        run: |
          docker tag backend:${{ github.sha }} ${{ secrets.AWS_ECR_REGISTRY }}/backend:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/backend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster --region ${{ secrets.AWS_REGION }}

      - name: Install kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Deploy to Kubernetes
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=${ECR_REGISTRY}/backend:${IMAGE_TAG}
          kustomize build | kubectl apply -f -
